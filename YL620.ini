#This .INI file is also the HELP, MANUAL and HOW-TO file for mb2hal.

# note: got this from https://forum.linuxcnc.org/24-hal-components/34193-vfd-mb2hal?start=20

#Load the modbus HAL userspace module as the examples below,
#change to match your own HAL_MODULE_NAME and .ini file name
#Using HAL_MODULE_NAME=mb2hal or nothing (default): loadusr -W mb2hal config=config_file.ini
#Using HAL_MODULE_NAME=mymodule: loadusr -Wn mymodule mb2hal config=config_file.ini

#Common section

[MB2HAL_INIT]

#OPTIONAL: Debug level of init and INI file parsing.
# 0 = silent.
# 1 = error messages (default).
# 2 = OK confirmation messages.
# 3 = debugging messages.

INIT_DEBUG=3

#OPTIONAL: HAL module (component) name. Defaults to "mb2hal".

HAL_MODULE_NAME=YL620

#OPTIONAL: Insert a delay of "FLOAT seconds" between transactions in order
#to not to have a lot of logging and facilitate the debugging.
#Useful when using DEBUG=3 (NOT INIT_DEBUG=3)
#It affects ALL transactions.
#Use "0.0" for normal activity.

SLOWDOWN=0.0

#REQUIRED: The number of total Modbus transactions. There is no maximum.

TOTAL_TRANSACTIONS=8

# 0x0004(4) 	<-> maximum allowed frequency
# 0x2000(8192)	<-> control register
# 0x2001(8193)	<-> set frequency
# 0x2008(8200)	<- error code
# 0x200b(8203)	<- output frequency
 
#  {REG_CONNECT_WRITE, 0x2000, 128}, // Reset all errors
#  {REG_MAX_FREQ_READ, 0x0004,   0}, // Max frequency
#  {REG_FREQ_SET,      0x2001,   0}, // Frequency
#  {REG_STOP_WRITE,    0x2000,   1}, // Stop drive
#  {REG_FWD_WRITE,     0x2000,  18}, // Forward
#  {REG_REV_WRITE,     0x2000,  34}, // Reverse
#  {REG_FREQ_READ,     0x200b,   0}, // Output freq
#  {REG_STATUS_READ,   0x2008,   0}, // Status


#One transaction section is required per transaction, starting at 00 and counting up sequentially.
#If there is a new link (not transaction), you must provide the REQUIRED parameters 1st time.
#Warning: Any OPTIONAL parameter not specified are copied from the previous transaction.

[TRANSACTION_00]
# write control register
#
LINK_TYPE=Serial
SERIAL_PORT=/dev/ttyUSB0
SERIAL_BAUD=9600
SERIAL_BITS=8
SERIAL_PARITY=none
SERIAL_STOP=1
SERIAL_DELAY_MS=8
MB_SLAVE_ID=10
FIRST_ELEMENT=8192
NELEMENTS=1
#REQUIRED: Modbus transaction function code (see www.modbus.org specifications).
#    fnct_01_read_coils 		      (01 = 0x01)
#    fnct_02_read_discrete_inputs     (02 = 0x02)
#    fnct_03_read_holding_registers   (03 = 0x03)
#    fnct_04_read_input_registers     (04 = 0x04)
#    fnct_05_write_single_coil        (05 = 0x05)
#    fnct_06_write_single_register    (06 = 0x06)
#    fnct_15_write_multiple_coils     (15 = 0x0F)
#    fnct_16_write_multiple_registers (16 = 0x10)

#fnct_02_read_discrete_inputs: creates boolean output HAL pins.
#fnct_03_read_holding_registers: creates a floating point output HAL pins.
#                           also creates a u32 output HAL pins.
#fnct_04_read_input_registers: creates a floating point output HAL pins.
#                         also creates a u32 output HAL pins.
#fnct_15_write_multiple_coils: creates boolean input HAL pins.
#fnct_16_write_multiple_registers: creates a floating point input HAL pins.

#The pins are named based on component name, transaction number and order number.
#Example: mb2hal.00.01 (transaction=00, second register=01 (00 is the first one))

#~ MB_TX_CODE=fnct_06_write_single_register
MB_TX_CODE=fnct_16_write_multiple_registers

#OPTIONAL: Response timeout for this transaction. In INTEGER ms. Defaults to 500 ms.
#This is how much to wait for 1st byte before raise an error.

MB_RESPONSE_TIMEOUT_MS=500

#OPTIONAL: Byte timeout for this transaction. In INTEGER ms. Defaults to 500 ms.
#This is how much to wait from byte to byte before raise an error.

MB_BYTE_TIMEOUT_MS=500

#OPTIONAL: Instead of giving the transaction number, use a name.
#Example: mb2hal.00.01 could become mb2hal.plcin.01
#The name must not exceed 32 characters.
#NOTE: when using names be careful that you dont end up with two transactions
#usign the same name.

HAL_TX_NAME=W_Control

#OPTIONAL: Maximum update rate in HZ. Defaults to 0.0 (0.0 = as soon as available = infinit).
#NOTE: This is a maximum rate and the actual rate may be lower.
#If you want to calculate it in ms use (1000 / required_ms).
#Example: 100 ms = MAX_UPDATE_RATE=10.0, because 1000.0 ms / 100.0 ms = 10.0 Hz

MAX_UPDATE_RATE=50.0

#OPTIONAL: Debug level for this transaction only.
#See INIT_DEBUG parameter above.

DEBUG=0

#While DEBUGGING transactions note the returned "ret[]" value correspond to:
#/* Modbus protocol exceptions */
#ILLEGAL_FUNCTION        -0x01 the FUNCTION code received in the query is not allowed or invalid.
#ILLEGAL_DATA_ADDRESS    -0x02 the DATA ADDRESS received in the query is not an allowable address for the slave or is invalid.
#ILLEGAL_DATA_VALUE      -0x03 a VALUE contained in the data query field is not an allowable value or is invalid.
#SLAVE_DEVICE_FAILURE    -0x04 SLAVE (or MASTER) device unrecoverable FAILUER while attemping to perform the requested action.
#SERVER_FAILURE          -0x04 (see above).
#ACKNOWLEDGE             -0x05 This response is returned to PREVENT A TIMEOUT in the master.
#                              A long duration of time is required to process the request in the slave.
#SLAVE_DEVICE_BUSY       -0x06 The slave (or server) is BUSY. Retrasmit the request later.
#SERVER_BUSY             -0x06 (see above).
#NEGATIVE_ACKNOWLEDGE    -0x07 Unsuccessful programming request using function code 13 or 14.
#MEMORY_PARITY_ERROR     -0x08 SLAVE parity error in MEMORY.
#GATEWAY_PROBLEM_PATH    -0x0A (-10) Gateway path(s) not available.
#GATEWAY_PROBLEM_TARGET  -0x0B (-11) The target device failed to repond (generated by master, not slave).
#/* Program or connection */
#COMM_TIME_OUT           -0x0C (-12)
#PORT_SOCKET_FAILURE     -0x0D (-13)
#SELECT_FAILURE          -0x0E (-14)
#TOO_MANY_DATAS          -0x0F (-15)
#INVALID_CRC             -0x10 (-16)
#INVALID_EXCEPTION_CODE  -0x11 (-17)

[TRANSACTION_01]
#read control register
MB_TX_CODE=fnct_03_read_holding_registers
FIRST_ELEMENT=8192
NELEMENTS=1
HAL_TX_NAME=R_Control
MAX_UPDATE_RATE=50.0
DEBUG=0

[TRANSACTION_02]
#write setpoint frequency
MB_TX_CODE=fnct_16_write_multiple_registers
#~ MB_TX_CODE=fnct_06_write_single_register
FIRST_ELEMENT=8193
NELEMENTS=1
#~ HAL_TX_NAME=W_Setpoint
HAL_TX_NAME=W_SetFreq
MAX_UPDATE_RATE=50.0
DEBUG=0

[TRANSACTION_03]
#read actual frequency
MB_TX_CODE=fnct_03_read_holding_registers
FIRST_ELEMENT=8203
NELEMENTS=1
#~ HAL_TX_NAME=R_Actual_Freq
HAL_TX_NAME=R_ActualFreq
MAX_UPDATE_RATE=50.0
DEBUG=0

[TRANSACTION_04]
#read error code
MB_TX_CODE=fnct_03_read_holding_registers
FIRST_ELEMENT=8200
NELEMENTS=1
HAL_TX_NAME=R_ErrCode
MAX_UPDATE_RATE=50.0
DEBUG=0

[TRANSACTION_05]
#read maximum allowed frequency
MB_TX_CODE=fnct_03_read_holding_registers
NELEMENTS=1
FIRST_ELEMENT=0004
HAL_TX_NAME=R_MaxFreq
MAX_UPDATE_RATE=50.0
DEBUG=0

[TRANSACTION_06]
#read Status
MB_TX_CODE=fnct_03_read_holding_registers
NELEMENTS=1
FIRST_ELEMENT=8201
HAL_TX_NAME=R_Status
MAX_UPDATE_RATE=50.0
DEBUG=0

[TRANSACTION_07]
#read Panel Knob Position
MB_TX_CODE=fnct_03_read_holding_registers
NELEMENTS=1
FIRST_ELEMENT=8228
HAL_TX_NAME=R_PanelKnob
MAX_UPDATE_RATE=50.0
DEBUG=0


